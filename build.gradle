buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:0.11.91.1"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1"
    }
}

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "1.2.1"
}

repositories {
    mavenCentral()
}

group = "com.knewton.dynamok"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.github.kt3k.coveralls"

allprojects {
    apply plugin: "maven"
    apply plugin: "kotlin"
    apply plugin: "jacoco"

    group = "com.knewton.dynamok"
    version = "0.0.1"

    repositories {
        mavenCentral()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

ext.libs = [
    kotlin: "org.jetbrains.kotlin:kotlin-stdlib:0.11.91.1",
    aws_dynamo: "com.amazonaws:aws-java-sdk-dynamodb:1.9.+",
    aws_cloudwatch: "com.amazonaws:aws-java-sdk-cloudwatch:1.9.+",
    aws_sns: "com.amazonaws:aws-java-sdk-sns:1.9.+",
    apache_lang: "org.apache.commons:commons-lang3:3.4",
    log: "org.slf4j:slf4j-api:1.7.+",

    log_tests: "org.slf4j:slf4j-simple:1.7.+",
    unit_tests: [
        "junit:junit:4.+",
        "org.assertj:assertj-core:2+",
        "org.mockito:mockito-core:2+"
    ]
]

dependencies {
    compile project(":dynamok-core")
    compile project(":dynamok-scaling")
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
    setOnlyIf { true }
}

tasks.build.dependsOn(javadoc)
tasks.build.dependsOn(jacocoRootReport)
tasks.build.dependsOn(shadowJar)
tasks.install.dependsOn(build)